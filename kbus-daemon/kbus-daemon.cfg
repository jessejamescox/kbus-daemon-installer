# The main configuration file for the Kbus <> MQTT
# client service.  Please configure all points.

# The hostname or some unique identifier to the
# MQTT broker.  There is no default, this must be
# uniquie for the broker and configured by the user
# If AWS shadaow compatibiltiiy is enabled, this will
# be used as your thing name from the IoT Core
# ** if blank, the controller hostname will be used
#node_id = "PFC200V3-46E6CA";

# True will launch an MQTT broker locally. If false
# the controller will require an external MQTT broker
# connection
start_local_broker = false;

# The broker network address, this can be localhost
# or an external device address
# mqtt_endpoint = "127.0.0.1";
mqtt_endpoint = "a149vimaq58p1y-ats.iot.us-west-2.amazonaws.com";

# Mqtt broker port.  The beta version only supports
# non-TLS encrypted connections and no SSL config
mqtt_port = 1883;

# Maximum number of retries before the program exits
# setting this to a negative number will loop infinitely
max_retries = -1;

# Setting this to true enables the TLS capabiltiy from
# the client only. TLS is not currently supported by the
# local broker. When enabled, you must have cert, key,
# and rootCA paths mapped below
support_tls = true;

# direct path to your certificate
# cert_path = "/etc/ssl/certs/mycert.pem.crt";

# direct path to your private key
# key_path = "/etc/ssl/certs/mykey.pem.key";

# direct path to your rootCA certificate
rootca_path = "/etc/ssl/certs/root.ca.pem";

# setting this true formats the mqtt topics and payload
# to comply with the AWS IoT Thing Shadow formatting
support_aws_shadow = false;

#TOPICS
# subscribe topic for kbus events. publish to this topic
# to command kbus outputs.  Unless formatted to AWS Thing
# Shadow, the topic will be prefixed with the Node ID.
event_sub_topic = "/controller/kbus/event/outputs";

# publish topic for kbus events. subscribe to this topic
# for messages on input change-of-state.  Unless formatted
# AWS Thing Shadow, the topic will be prefixed with the
# Node ID.
event_pub_topic = "/controller/kbus/event/inputs";

# publish topic for kbus status. subscribe to this topic
# for messages on status change-of-state.  Unless formatted
# AWS Thing Shadow, the topic will be prefixed with the
# Node ID.
status_pub_topic = "/controller/status";

# setting this creates a deadband with analog input signals
# which for now is the decimal value threshold you must
# exceed to trigger an update to  publish
analog_deadband = 5;